generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?  @unique
  name         String?  @default("")
  phone        String?  @unique
  image        String?  @default("")
  dob          String?  @default("")
  gender       Gender   @default(MALE)
  password     String?
  refreshToken String?
  accessToken  String?
  isVerified   Boolean  @default(false)
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders Order[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  products   categoryProduct[]
  outboundId String?

  @@index([name])
  @@map("categories")
}

model Product {
  id            String   @id @default(uuid())
  sku           String?  @unique
  product_name  String?  @default("")
  base_price    Int?
  total_price   Int?
  quantity      Int?
  product_photo String?  @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orders Order[] @relation("OrderProducts")

  categories categoryProduct[]

  @@index([base_price])
  @@index([product_name])
  @@index([sku])
  @@map("products")
}

model categoryProduct {
  id         String @id @default(uuid())
  categoryId String
  productId  String
  quantity   Int?
  price      Int?

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([categoryId, productId])
  @@map("categoryProducts")
}

model Order {
  id           String       @id @default(uuid())
  userId       String
  order_date   DateTime?    @default(now())
  order_status Order_status @default(PENDING)
  quantity     Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  // many-to-many relation with products
  products Product[] @relation("OrderProducts")

  @@map("orders")
}

model Service {
  id        String   @id @default(uuid())
  title     String   @default("")
  photo     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Services")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  USER
}

enum Order_status {
  PENDING
  PROCESSING
  SUCCESS
  REJECT
}
