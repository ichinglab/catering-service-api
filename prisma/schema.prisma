generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?  @unique
  first_name   String?  @default("")
  last_name    String?
  phone        String?  @unique
  image        String?  @default("")
  dob          String?  @default("")
  gender       Gender   @default(MALE)
  address      String?
  password     String?
  refreshToken String?
  accessToken  String?
  isVerified   Boolean  @default(false)
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders Order[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  products   categoryProduct[]
  outboundId String?

  @@index([name])
  @@map("categories")
}

model Product {
  id            String   @id @default(uuid())
  sku           String?  @unique
  title         String?  @default("")
  description   String?
  base_price    Int?
  total_price   Int?
  discount      Int?
  quantity      Int?
  address       String?
  duration      String?
  package_title String?
  food_items    String[]
  timeSlots     String[]
  sold_count    Int?     @default(0)
  product_photo String?  @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //relations
  categories categoryProduct[]
  orderItems OrderProduct[]

  @@index([base_price])
  @@index([title])
  @@index([sku])
  @@map("products")
}

model categoryProduct {
  id         String @id @default(uuid())
  categoryId String
  productId  String
  quantity   Int?
  price      Int?

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([categoryId, productId])
  @@map("categoryProducts")
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  order_date     DateTime?      @default(now())
  order_status   Order_status   @default(PENDING)
  payment_status payment_status @default(UNPAID)
  payment_method payment_method @default(CASH_ON_DELIVERY)
  subtotal       Int?
  shipping_fee   Int?           @default(0)
  total_amount   Int?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  orderItems     OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Int // store price at order time
  subtotal  Int // price * quantity

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_products")
}

model Service {
  id        String   @id @default(uuid())
  title     String   @default("")
  photo     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Services")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  USER
}

enum Order_status {
  PENDING
  PROCESSING
  SUCCESS
  REJECT
}

enum payment_status {
  UNPAID
  PAID
}

enum payment_method {
  CASH_ON_DELIVERY
  ONLINE
}
